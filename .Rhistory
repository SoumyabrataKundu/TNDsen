rowSums(o)
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
dim(o)
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(prop.table(table(data$Label)))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
rowSums(o)
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
dim(o)
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(prop.table(table(data$Label)))
# Simulation parameters
n = 100
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
beta0[1]=0
beta[1,]=0
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
rowSums(o)
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
dim(o)
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(prop.table(table(data$Label)))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
rowSums(o)
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
dim(o)
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(prop.table(table(data$Label)))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
rowSums(o)
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
dim(o)
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
length(class_labels)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
# Fit the multinomial logistic regression model
library(glmnet)
model <- multinom(Label ~ C, data=data)
Sigma_beta <- vcov(model) # Extract the variance-covariance matrix
o.hat = predict(model, type = "probs")
dim(Sigma_beta)
dim(o.hat)
library(TNDsen)
TND_causal_bounds(o.hat[1,], 0.1, 5)$upper.bound
library(TNDsen)
for(i in 1:n)
{
print(TND_causal_bounds(o.hat[1,], 0.1, 5)$upper.bound)
}
library(TNDsen)
for(i in 1:n)
{
print(TND_causal_bounds(o.hat[i,], 0.1, 5)$upper.bound)
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(k$upper.bound, k$lower.bound)
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(k$upper.bound, k$lower.bound)
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(c(k$upper.bound, k$lower.bound))
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(1-c(k$upper.bound, k$lower.bound))
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(1-c(k$upper.bound, k$lower.bound))
}
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(1-c(k$upper.bound, k$lower.bound))
}
# Fit the multinomial logistic regression model
library(glmnet)
model <- multinom(Label ~ C, data=data)
Sigma_beta <- vcov(model) # Extract the variance-covariance matrix
o.hat = predict(model, type = "probs")
dim(Sigma_beta)
dim(o.hat)
library(TNDsen)
for(i in 1:n)
{
k = TND_causal_bounds(o.hat[i,], 0.1, 5)
print(1-c(k$upper.bound, k$lower.bound))
}
index = 1
Sigma = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
dim(Sigma)
index = 1
Sigma = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
dim(kronecker(Sigma, c(1,C[index, ])))
index = 1
Sigma = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma, c(1,C[index, ]))
t(delta) %*% Sigma_beta %*% delta
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: inv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1,C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
index = 1
Sigma_multinomial = (diag(o.hat[index,]) - o.hat[index,] %*% t(o.hat[index,]))[-1, -1]
delta = kronecker(Sigma_multinomial, c(1, C[index, ]))
Sigma = t(delta) %*% Sigma_beta %*% delta
MASS :: ginv(Sigma)
source('./TNDsen/R/fit_multinomial.R')
source('./TNDsen/R/fit_multinomial.R')
source('./TNDsen/R/fit_multinomial.R')
fit_multinomial(data)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data$Label == 2*data$Z + data$Y + 1
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data$Label == 2*data$Y + data$Z + 1
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data$Label - 2*data$Y + data$Z + 1
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data$Label == 2*data$Z + data$Y
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data$Label == 2*data$Y + data$Z
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = class_labels,
C
)
data
barplot(table(data$Label))
source('./TNDsen/R/fit_multinomial.R')
fit_multinomial(data)
pwd
pwd()
pwd()
get_pwd()
getwd()
setwd("D:\UCHICAGO\Academic\Projects\Research Projects\Bounds on Test Negative Design\JASA Round 1 Revision\")
setwd("D:\\UCHICAGO\\Academic\\Projects\\Research Projects\\Bounds on Test Negative Design\\JASA Round 1 Revision\")
setwd("D:\\UCHICAGO\\Academic\\Projects\\Research Projects\\Bounds on Test Negative Design\\JASA Round 1 Revision\")
setwd("D:\\UCHICAGO\\Academic\\Projects\\Research Projects\\Bounds on Test Negative Design\\JASA Round 1 Revision\\")
getwd()
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
ls
devtools::install_local("TNDsen", INSTALL_opts="--no-multiarch")
devtools::install_local("TNDsen")
devtools::install_local("TNDsen", force=TRUE)
