scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(0.5,1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
library(TNDsen)
library(knitrProgressBar)
library(ggplot2)
library(patchwork)
library(extraDistr)
library(latex2exp)
coverage = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
CI_type = c('transformed', 'normal', 'quadratic')
data = data.frame()
pb = progress_estimated(n.sim)
o=o/sum(o)
i = 1
while(i<=n.sim)
{
o.hat = c(rmultinom(1, n.population, o))
if(all(o.hat>0))
{
for(j in 1:length(CI_type))
{
t0 = proc.time()
k = TND_causal_bounds(o.hat, delta, gamma, xi, alpha = alpha, conf.type = CI_type[j])
data[3*i+j-3, 'time'] = (proc.time() - t0)['elapsed'] / 60
data[3*i+j-3, 'CI'] = CI_type[j]
data[3*i+j-3, 'lower'] = k$lower.bound
data[3*i+j-3, 'upper'] = k$upper.bound
data[3*i+j-3, 'o00'] = o.hat[1]
data[3*i+j-3, 'o10'] = o.hat[2]
data[3*i+j-3, 'o01'] = o.hat[3]
data[3*i+j-3, 'o11'] = o.hat[4]
}
i = i+1
update_progress(pb)
}
}
return(data)
}
plot_CI_compare = function(data, o, delta, gamma, xi, alpha)
{
k = TND_causal_bounds(c(o), delta, gamma, xi)
n.sim = nrow(data) %/% length(unique(data$CI))
# Density
p1 = ggplot(data = data) +
stat_density(data = subset(data, CI == "normal"), aes(x = lower, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "normal"), aes(x = upper, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = lower, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = upper, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = lower, col = "quadratic"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = upper, col = "quadratic"), geom="line")+
scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
library(TNDsen)
library(knitrProgressBar)
library(ggplot2)
library(patchwork)
library(extraDistr)
library(latex2exp)
coverage = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
CI_type = c('transformed', 'normal', 'quadratic')
data = data.frame()
pb = progress_estimated(n.sim)
o=o/sum(o)
i = 1
while(i<=n.sim)
{
o.hat = c(rmultinom(1, n.population, o))
if(all(o.hat>0))
{
for(j in 1:length(CI_type))
{
t0 = proc.time()
k = TND_causal_bounds(o.hat, delta, gamma, xi, alpha = alpha, conf.type = CI_type[j])
data[3*i+j-3, 'time'] = (proc.time() - t0)['elapsed'] / 60
data[3*i+j-3, 'CI'] = CI_type[j]
data[3*i+j-3, 'lower'] = k$lower.bound
data[3*i+j-3, 'upper'] = k$upper.bound
data[3*i+j-3, 'o00'] = o.hat[1]
data[3*i+j-3, 'o10'] = o.hat[2]
data[3*i+j-3, 'o01'] = o.hat[3]
data[3*i+j-3, 'o11'] = o.hat[4]
}
i = i+1
update_progress(pb)
}
}
return(data)
}
plot_CI_compare = function(data, o, delta, gamma, xi, alpha)
{
k = TND_causal_bounds(c(o), delta, gamma, xi)
n.sim = nrow(data) %/% length(unique(data$CI))
# Density
p1 = ggplot(data = data) +
stat_density(data = subset(data, CI == "normal"), aes(x = lower, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "normal"), aes(x = upper, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = lower, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = upper, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = lower, col = "quadratic"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = upper, col = "quadratic"), geom="line")+
scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
library(TNDsen)
library(knitrProgressBar)
library(ggplot2)
library(patchwork)
library(extraDistr)
library(latex2exp)
coverage = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
CI_type = c('transformed', 'normal', 'quadratic')
data = data.frame()
pb = progress_estimated(n.sim)
o=o/sum(o)
i = 1
while(i<=n.sim)
{
o.hat = c(rmultinom(1, n.population, o))
if(all(o.hat>0))
{
for(j in 1:length(CI_type))
{
t0 = proc.time()
k = TND_causal_bounds(o.hat, delta, gamma, xi, alpha = alpha, conf.type = CI_type[j])
data[3*i+j-3, 'time'] = (proc.time() - t0)['elapsed'] / 60
data[3*i+j-3, 'CI'] = CI_type[j]
data[3*i+j-3, 'lower'] = k$lower.bound
data[3*i+j-3, 'upper'] = k$upper.bound
data[3*i+j-3, 'o00'] = o.hat[1]
data[3*i+j-3, 'o10'] = o.hat[2]
data[3*i+j-3, 'o01'] = o.hat[3]
data[3*i+j-3, 'o11'] = o.hat[4]
}
i = i+1
update_progress(pb)
}
}
return(data)
}
plot_CI_compare = function(data, o, delta, gamma, xi, alpha)
{
k = TND_causal_bounds(c(o), delta, gamma, xi)
n.sim = nrow(data) %/% length(unique(data$CI))
# Density
p1 = ggplot(data = data) +
stat_density(data = subset(data, CI == "normal"), aes(x = lower, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "normal"), aes(x = upper, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = lower, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = upper, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = lower, col = "quadratic"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = upper, col = "quadratic"), geom="line")+
scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
library(TNDsen)
library(knitrProgressBar)
library(ggplot2)
library(patchwork)
library(extraDistr)
library(latex2exp)
coverage = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
CI_type = c('transformed', 'normal', 'quadratic')
data = data.frame()
pb = progress_estimated(n.sim)
o=o/sum(o)
i = 1
while(i<=n.sim)
{
o.hat = c(rmultinom(1, n.population, o))
if(all(o.hat>0))
{
for(j in 1:length(CI_type))
{
t0 = proc.time()
k = TND_causal_bounds(o.hat, delta, gamma, xi, alpha = alpha, conf.type = CI_type[j])
data[3*i+j-3, 'time'] = (proc.time() - t0)['elapsed'] / 60
data[3*i+j-3, 'CI'] = CI_type[j]
data[3*i+j-3, 'lower'] = k$lower.bound
data[3*i+j-3, 'upper'] = k$upper.bound
data[3*i+j-3, 'o00'] = o.hat[1]
data[3*i+j-3, 'o10'] = o.hat[2]
data[3*i+j-3, 'o01'] = o.hat[3]
data[3*i+j-3, 'o11'] = o.hat[4]
}
i = i+1
update_progress(pb)
}
}
return(data)
}
plot_CI_compare = function(data, o, delta, gamma, xi, alpha)
{
k = TND_causal_bounds(c(o), delta, gamma, xi)
n.sim = nrow(data) %/% length(unique(data$CI))
# Density
p1 = ggplot(data = data) +
stat_density(data = subset(data, CI == "normal"), aes(x = lower, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "normal"), aes(x = upper, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = lower, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = upper, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = lower, col = "quadratic"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = upper, col = "quadratic"), geom="line")+
scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
library(TNDsen)
library(knitrProgressBar)
library(ggplot2)
library(patchwork)
library(extraDistr)
library(latex2exp)
coverage = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
CI_type = c('transformed', 'normal', 'quadratic')
data = data.frame()
pb = progress_estimated(n.sim)
o=o/sum(o)
i = 1
while(i<=n.sim)
{
o.hat = c(rmultinom(1, n.population, o))
if(all(o.hat>0))
{
for(j in 1:length(CI_type))
{
t0 = proc.time()
k = TND_causal_bounds(o.hat, delta, gamma, xi, alpha = alpha, conf.type = CI_type[j])
data[3*i+j-3, 'time'] = (proc.time() - t0)['elapsed'] / 60
data[3*i+j-3, 'CI'] = CI_type[j]
data[3*i+j-3, 'lower'] = k$lower.bound
data[3*i+j-3, 'upper'] = k$upper.bound
data[3*i+j-3, 'o00'] = o.hat[1]
data[3*i+j-3, 'o10'] = o.hat[2]
data[3*i+j-3, 'o01'] = o.hat[3]
data[3*i+j-3, 'o11'] = o.hat[4]
}
i = i+1
update_progress(pb)
}
}
return(data)
}
plot_CI_compare = function(data, o, delta, gamma, xi, alpha)
{
k = TND_causal_bounds(c(o), delta, gamma, xi)
n.sim = nrow(data) %/% length(unique(data$CI))
# Density
p1 = ggplot(data = data) +
stat_density(data = subset(data, CI == "normal"), aes(x = lower, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "normal"), aes(x = upper, col = "normal"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = lower, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "transformed"), aes(x = upper, col = "transformed"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = lower, col = "quadratic"), geom="line")+
stat_density(data = subset(data, CI == "quadratic"), aes(x = upper, col = "quadratic"), geom="line")+
scale_y_continuous(expand = c(0, 0)) +
coord_trans(x='log10') +
geom_hline(yintercept=0) + xlab("Bounds") + ylab("Density") +
scale_color_discrete(name="CI Type", labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$"))) +
theme(legend.position = c(0.85, 0.8)) +
geom_vline(xintercept = k$lower.bound, linetype="dashed") +
geom_vline(xintercept = k$upper.bound, linetype="dashed") +
annotate("text", x = k$lower.bound-0.05, y = 5, label = "True Lower bound", angle = "90")+
annotate("text", x = k$upper.bound+0.08, y = 5, label = "True Upper bound", angle = "270")
# Log Difference
p2 = ggplot(data=data) +
geom_boxplot(aes(x = CI, y = log(upper) - log(lower)), fill = 'lightblue') +
scale_x_discrete(labels = c(TeX("$C_\\alpha^N$"), TeX("$C_\\alpha^Q$"), TeX("$C_\\alpha^T$")))+
ylab("Log(Upper / Lower)")+
theme(axis.title.x = element_blank())
# Time
p3 = ggplot(data = data, aes(x=1:n.sim)) +
geom_point(data = subset(data, CI == "normal"), aes(y = time, col = "normal")) +
geom_point(data = subset(data, CI == "quadratic"), aes(y = time, col = "quadratic")) +
geom_point(data = subset(data, CI == "transformed"), aes(y = time, col = "transformed")) +
coord_trans(y='log10') +
scale_y_continuous(breaks = c(1,5,10)) +
xlab("Simulation") + ylab("Time (minutes)")+
theme(legend.position = "none")
p1 + (p2/p3)
}
CI_comparison = function(o, delta, gamma, xi, alpha = 0.95, n.population = 1000, n.sim = 20)
{
data = coverage(o = o, delta = delta, gamma = gamma, xi = xi, alpha = alpha, n.population = n.population, n.sim = n.sim)
return(data)
}
#set.seed(123)
#o = c(0.1, 0.2, 0.3, 0.4)
#data = CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_CI_compare(data = data, o = o,  delta = delta, gamma = gamma, xi = xi, alpha = alpha)
set.seed(123456)
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
o_range = c(0.1,0.9)
COR_range = c(0.1, 0.5)
# Testing Covariates
d = 1
n.test = 5
C_star = matrix(rep(seq(0, 1, length.out=n.test),d), ncol=d)
design_matrix = cbind(1, C_star)
# Choosing suitable beta
softmax = function(x) {
exp_x = exp(x - max(x))
return( exp_x / sum(exp_x))}
while(TRUE)
{
# Sample Beta from N(0,1)
beta = rbind(0, matrix(rnorm(3*(d+1), mean=0), nrow = 3, ncol = d+1))
# True Probability range
o = t(apply(beta %*%t(design_matrix), 2, softmax))
if(min(o)<o_range[1] | max(o)>o_range[2]) next
break
}
paste0('o in ', '(', round(min(o),2),', ',round(max(o),2), ')')
set.seed(123456)
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
o_range = c(0.1,0.9)
COR_range = c(0.1, 0.5)
# Testing Covariates
d = 1
n.test = 5
C_star = matrix(rep(seq(0, 1, length.out=n.test),d), ncol=d)
design_matrix = cbind(1, C_star)
# Choosing suitable beta
softmax = function(x) {
exp_x = exp(x - max(x))
return( exp_x / sum(exp_x))}
while(TRUE)
{
# Sample Beta from N(0,1)
beta = rbind(0, matrix(rnorm(3*(d+1), mean=0), nrow = 3, ncol = d+1))
# True Probability range
o = t(apply(beta %*%t(design_matrix), 2, softmax))
if(min(o)<o_range[1] | max(o)>o_range[2]) next
# True Causal Odds Ratio range
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
if(min(apply(l, 1, odds.ratio), apply(u, 1, odds.ratio))<=COR_range[1] |
max(apply(l, 1, odds.ratio), apply(u, 1, odds.ratio))>=COR_range[2]) next
break
}
paste0('o in ', '(', round(min(o),2),', ',round(max(o),2), ')')
