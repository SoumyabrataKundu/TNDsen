}
}
# Run Time
elapsed = floor((proc.time() - start)['elapsed'])
print(paste('Run Time:', elapsed %/% 60, 'min', elapsed %% 60, 'sec.'))
# Coverage
print(paste('Beta not covered at:', paste(not_cover_beta, collapse = " ")))
print(paste('Coverage of beta:', 1 - length(not_cover_beta) / n.sim))
print(paste('o not covered at:', paste(not_cover_o, collapse = " ")))
print(paste('Simultaneous Coverage of o:', 1 - length(not_cover_o) / n.sim))
print(paste('COR not covered at:', paste(not_cover_cor, collapse = " ")))
print(paste('Simultaneous Coverage of COR:', 1 - length(not_cover_cor) / n.sim))
plot_data = (1-result)*100
plot_data$C = design_matrix[,-1]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.1
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col='Senstivity Adjusted CI')) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col='Senstivity Adjusted CI')) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col='Senstivity Adjusted CI')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
#geom_vline(aes(xintercept = OR, col = 'True Odd Ratio'), linetype = 'dashed', size=1) +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
set.seed(123456)
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
o_range = c(0.1,0.9)
COR_range = c(0.1, 0.5)
# Testing Covariates
d = 1
n.test = 5
C_star = matrix(rep(seq(0, 1, length.out=n.test),d), ncol=d)
design_matrix = cbind(1, C_star)
# Choosing suitable beta
softmax = function(x) {
exp_x = exp(x - max(x))
return( exp_x / sum(exp_x))}
while(TRUE)
{
# Sample Beta from N(0,1)
beta = rbind(0, matrix(rnorm(3*(d+1), mean=0), nrow = 3, ncol = d+1))
# True Probability range
o = t(apply(beta %*%t(design_matrix), 2, softmax))
if(min(o)<o_range[1] | max(o)>o_range[2]) next
# True Causal Odds Ratio range
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
if(min(apply(l, 1, odds.ratio))<=COR_range[1] |
max(apply(u, 1, odds.ratio))>=COR_range[2]) next
break
}
paste0('o in ', '(', round(min(o),2),', ',round(max(o),2), ')')
data_generation = function(beta, C)
{
# Sample Covariates from Uniform (0,1)
if(missing(C)){C = matrix(runif(n.population*d), ncol = d)}
# o = softmax(beta @ C + beta_0)
o = t(apply(beta %*%t(cbind(1, C)), 2, softmax))
# 2Y+Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)}
class_labels = apply(o, 1, sample_class)
data = data.frame(Z = class_labels %% 2, Y = class_labels %/% 2, C)
names(data) = c('Z', 'Y', paste0('C', 1:d))
return(data)
}
n.population = 50000 # Population size for training
n.sim = 20           # Number of Simulations
level = 0.95         # Confidence Level
conf.type = c('normal', 'quadratic')
not_cover_beta = c()
not_cover_o = c()
not_cover_cor = c()
result = data.frame()
index = 1
t0 = Sys.time()
# Confidence Bounds for Causal Odds Ratio
for(sim in 1:n.sim)
{
print(paste('Simulation', sim))
model = multinom(as.formula(paste0('2*Y + Z ~ ', paste0('C', 1:d, collapse = "+"))), data=data_generation(beta), trace=FALSE)
o.hat = predict(model, data_generation(beta, C_star), type = 'probs')
Sigma_beta = vcov(model)
cat('\f')
# Checking Coverage for beta
beta_delta = c(t(coef(model) - beta[-1,]))
if((t(beta_delta) %*% MASS::ginv(Sigma_beta) %*% beta_delta > qchisq(level, length(coef(model)))))
not_cover_beta = c(not_cover_beta, sim)
for (i in 1:n.test)
{
print(paste('Simulation', sim, ':', i, '/', n.test))
# Confidence Bounds for Odds Ratio
Sigma_or = kronecker(c(-1,-1,1), design_matrix[i,]) * odds.ratio(o.hat[i,])  # 1 x 3d
variance = diag(t(Sigma_or) %*% Sigma_beta %*% Sigma_or)
result[index, 'OR'] = odds.ratio(o[i,])
result$OR.CI.lower[index] = odds.ratio(o.hat[i,]) - qnorm((1+level)/2) * sqrt(variance)
result$OR.CI.upper[index] = odds.ratio(o.hat[i,]) + qnorm((1+level)/2) * sqrt(variance)
# True Bounds for Causal Odds Ratio
bounds = TND_causal_bounds(o[i,], delta, gamma, xi)
result$COR.lower[index] = bounds$lower.bound
result$COR.upper[index] = bounds$upper.bound
# Confidence Bounds for each Causal Odd Ratio
## Variance Matrix using Delta Method
Sigma_o = diag(o.hat[i,]) - o.hat[i,] %*% t(o.hat[i,])    #  4 x 4
Sigma_delta = kronecker(Sigma_o[2:4,], design_matrix[i,]) # 3d x 4
Sigma = t(Sigma_delta) %*% Sigma_beta %*% Sigma_delta     #  4 x 4
## Sensitivity Bounds
for(conf in conf.type){
bounds = TND_causal_bounds(o.hat[i, ], delta, gamma, xi, alpha = level, conf.type = conf,
Sigma = Sigma, dim=length(coef(model)), TimeLimit = 180)
result[index, paste0('COR.CI.lower.', conf)] = bounds$lower.bound
result[index, paste0('COR.CI.upper.', conf)] = bounds$upper.bound
# Checking Coverage for bounds
if(result$COR.lower[index] < bounds$lower.bound | result$COR.upper[index] > bounds$upper.bound)
not_cover_cor = unique(c(not_cover_cor, sim))
}
## Checking Coverage for o
if(t(o[i,] - o.hat[i,]) %*% MASS::ginv(Sigma) %*% (o[i,] - o.hat[i,]) > qchisq(level, length(coef(model))))
not_cover_o = unique(c(not_cover_o, sim))
index = index + 1
cat('\f')
}
}
# Run Time
print(round(Sys.time()-t0, 2))
# Coverage
print(paste('Beta not covered at:', paste(not_cover_beta, collapse = " ")))
print(paste('Coverage of beta:', 1 - length(not_cover_beta) / n.sim))
print(paste('o not covered at:', paste(not_cover_o, collapse = " ")))
print(paste('Simultaneous Coverage of o:', 1 - length(not_cover_o) / n.sim))
print(paste('COR not covered at:', paste(not_cover_cor, collapse = " ")))
print(paste('Simultaneous Coverage of COR:', 1 - length(not_cover_cor) / n.sim))
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.1
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
knitr::opts_chunk$set(echo = TRUE)
# Figure A1
source('./scripts/CI_compare.R')
set.seed(123)
o = c(0.1, 0.2, 0.3, 0.4)
CI_comparison(o, delta=0.1, gamma=5, xi=2, alpha=0.95, n.population=1000, n.sim=20)
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.1
ggplot(data = plot_data[1:10,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data = (1-result)*100
plot_data$C = design_matrix[,10]
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.1
ggplot(data = plot_data[1:10,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data[1:10,
plot_data[1:10,]
plot_data
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.1
ggplot(data = plot_data[1:50,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.5
ggplot(data = plot_data[1:50,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.25
ggplot(data = plot_data[1:50,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.25
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
plot_data = (1-result)*100
plot_data$C = design_matrix[,2]
plot_data$sim = rep(1:n.sim, each = n.test)
for(i in 1:n.sim)
plot_data$cover[1:n.test + (i-1)*n.test] = all(
plot_data$COR.CI.lower[1:n.test + (i-1)*n.test]>= plot_data$COR.lower[1:n.test + (i-1)*n.test] &
plot_data$COR.upper[1:n.test + (i-1)*n.test]>= plot_data$COR.CI.upper[1:n.test + (i-1)*n.test])
width = 0.25
ggplot(data = plot_data[1:50,]) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
## normal
geom_point(aes(x = COR.CI.lower.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_point(aes(x = COR.CI.upper.normal, y = sim, col='Senstivity Adjusted CI\n(normal)')) +
geom_segment(aes(x = COR.CI.lower.normal, y = sim, xend = COR.CI.upper.normal, yend = sim, col='Senstivity Adjusted CI\n(normal)')) +
## quadratic
geom_point(aes(x = COR.CI.lower.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_point(aes(x = COR.CI.upper.quadratic, y = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
geom_segment(aes(x = COR.CI.lower.quadratic, y = sim - width, xend = COR.CI.upper.quadratic, yend = sim - width, col='Senstivity Adjusted CI\n(quadratic)')) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('black', 'red', 'darkgreen'))+
scale_fill_manual(values = c(alpha('blue', 0.025)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab(paste(n.sim, 'Simulations')) +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
