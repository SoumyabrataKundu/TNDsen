k = TND_causal_bounds(o.hat[index, ], data$delta[index], data$gamma[index], data$xi[index], alpha=0.95, conf.type = 'normal')
if(k$lower.bound <= odds.ratio(a[index, ]) & odds.ratio(a[index, ]) <= k$upper.bound)
{
print(TRUE)
}
}
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'quadratic')
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
# Simulation parameters
n = 1000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
model <- multinom(Label ~ C, data=data)
summary(model)
o.hat = predict(model, type = "probs")
max(o-o.hat[,c(2,3,4,1)])
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
# Simulation parameters
n = 1000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
model <- multinom(Label ~ C, data=data)
summary(model)
o.hat = predict(model, type = "probs")
max(o-o.hat[,c(2,3,4,1)])
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
# Simulation parameters
n = 1000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
model <- multinom(Label ~ C, data=data)
summary(model)
o.hat = predict(model, type = "probs")
max(o-o.hat[,c(2,3,4,1)])
model <- multinom(Label ~ C, data=data)
o.hat = predict(model, type = "probs")
o.hat = o.hat[,c(2,3,4,1)]
max(o-o.hat)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4), 0.1, 5,2)
TND_causal_bounds(c(1,2,3,4), 0.1, 5, 2)
TND_causal_bounds(c(1,2,3,4), 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*100, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
knitr::opts_chunk$set(echo = TRUE)
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
# Check if the value 3 is in the list
result <- any(3 %in% my_list)
print(result)  # Output: TRUE
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
# Check if the value 3 is in the list
result <- 'a' %in% my_list
print(result)  # Output: TRUE
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
my_list$d
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
my_list$d
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
my_list$d
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
my_list$d == NULL
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
print(my_list$d == NULL)
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
print(my_list$d == NULL)
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
if(my_list$d == NULL)
{
print('a')
}
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
# Check if the value 3 is in the list
result <- 'a' %in% names(my_list)
print(result)  # Output: TRUE
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
# Check if the value 3 is in the list
result <- 'd' %in% names(my_list)
print(result)  # Output: TRUE
# Example list
my_list <- list(a = 1, b = c(2, 3), c = "hello")
# Check if the value 3 is in the list
'd' %in% names(my_list)
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2,)
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2)$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')$upper.bound
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
matrix(rnorm(9), ncol=3)
diag(matrix(rnorm(9), ncol=3))
Sigma = matrix(rnorm(9), ncol=3)
Sigma
diag(Sigma)
Sigma = matrix(rnorm(9), ncol=3)
Sigma
diag(1/Sigma)
Sigma = matrix(rnorm(9), ncol=3)
Sigma
diag(1/Sigma)
1/0.2925987
Sigma = matrix(rnorm(9), ncol=3)
Sigma
diag(diag(1/Sigma))
Sigma = matrix(rnorm(9), ncol=3)
Sigma
Sigma %*% diag(diag(1/Sigma))
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')$upper.bound
set.seed(1)
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'normal')$upper.bound
TND_causal_bounds(c(1,2,3,4)*10, 0.1, 5, 2, conf.type = 'quadratic')$upper.bound
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
# Simulation parameters
n = 1000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
# Simulation parameters
n = 100
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
data
model <- multinom(Label ~ C, data=data)
o.hat = predict(model, type = "probs")
o.hat = o.hat[,c(2,3,4,1)]
max(o-o.hat)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'normal')
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'normal')
library(TNDsen)
library(nnet)
library(ggplot2)
# Simulation parameters
n = 100
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
knitr::opts_chunk$set(echo = TRUE)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
model <- multinom(Label ~ C, data=data)
o.hat = predict(model, type = "probs")
o.hat = o.hat[,c(2,3,4,1)]
max(o-o.hat)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'normal')
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
# Simulation parameters
n = 100
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## O = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)
a = extraDistr::rdirichlet(n,c(1,1,1,1)) * (u-l) + l
b = (o - a*(1-delta))/delta
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
data$Label = relevel(data$Label, ref="3")
## Sensitivity Parameters
data$delta = delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio), apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
model <- multinom(Label ~ C, data=data)
o.hat = predict(model, type = "probs")
o.hat = o.hat[,c(2,3,4,1)]
max(o-o.hat)
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ]*1000, data$delta[index], data$gamma[index], data$xi[index], alpha = 0.95, conf.type='normal')
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2, alpha=0.95, conf.type = 'normal')
library(TNDsen)
index=sample(1:n, 1)
k = TND_causal_bounds(o.hat[index, ], data$delta[index], data$gamma[index], data$xi[index])
c(k$lower.bound, odds.ratio(a[index, ]), k$upper.bound)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2)
library(TNDsen)
data = TND_causal_bounds_from_data(data, 0.1, 5, 2)
