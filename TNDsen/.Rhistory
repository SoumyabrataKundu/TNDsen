c(87, 87.75, 87.5, 88, 88.5, 89),
c(87.75, 88, 88.25, 88.5, 88.75, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(87.75, 88, 88.25, 88.5, 88.75, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.25, 88.5, 89),
c(87.75, 88, 88.25, 88.5, 88.75, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(87.75, 88, 88.25, 88.5, 88.75, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86, )
)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5, 87)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5, 87, 87.5)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5, 87, 87.5, 88, 88.5)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5, 87, 87.5, 88, 88.5, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", log.transformed = FALSE, n.contours = 5, highlight = highlight)
data = matrix(c(11812, 2847, 6065, 154,
604,  166,  134,   3,
725,   248,  250,  23), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "black", "hispanic")
colnames(data) = c("o00", "o01", "o10", "o11")
data
data = matrix(c(11812, 2847, 6065, 154,
604,  166,  134,   3,
725,   248,  250,  23), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "black", "hispanic")
colnames(data) = c("o00", "o01", "o10", "o11")
data
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
library(TNDsen)
library(metR)
library(cowplot)
library(knitrProgressBar)
############################## Gives the grid for the heatmap ###########################################
heatmap_grid = function(o, delta = c(0.1, 0.2), gamma.range = c(1,5), xi.range = c(2,5), grid = 10, alpha, conf.type = "normal")
{
# Making the grid for heat map
data.heatmap = expand.grid(delta.seq.heatmap=delta,
gamma.seq.heatmap=seq(gamma.range[1], gamma.range[2], length.out = grid),
xi.seq.heatmap=seq(xi.range[1], xi.range[2], length.out = grid))
# Computing the bounds
pb = progress_estimated(nrow(data.heatmap))
for (i in 1:nrow(data.heatmap)) {
k = TND_causal_bounds(o, data.heatmap$delta.seq.heatmap[i],
data.heatmap$gamma.seq.heatmap[i],
data.heatmap$xi.seq.heatmap[i],
alpha, conf.type)
data.heatmap$odds.ratio.upper[i] = k$upper.bound
data.heatmap$odds.ratio.lower[i] = k$lower.bound
update_progress(pb)
}
return(data.heatmap)
}
######################################## Plot Heatmap ###################################################
plot_heatmap = function(data.heatmap, o, OR, bound.type = 'upper', n.contours = 6, highlight)
{
# Plot Design
observed.or = odds.ratio(o)
flag = bound.type == "upper"
plot.list = list()
delta.values = unique(data.heatmap$delta.seq.heatmap)
for(i in 1:length(delta.values))
{
delta.value = delta.values[i]
subplot.data = data.heatmap[data.heatmap$delta.seq.heatmap == delta.value,]
## Heatmap Limits
heatmap.limits = `if`(flag, `if`(observed.or<1,
c(min(subplot.data$odds.ratio.upper),
min(max(subplot.data$odds.ratio.upper),1)),
c(observed.or, max(subplot.data$odds.ratio.upper))),
`if`(observed.or<1,
c(min(subplot.data$odds.ratio.lower), observed.or),
c(1, max(subplot.data$odds.ratio.lower))))
## Heatmap Contours
if(missing(OR))
{
contour_lines_OR = `if`(observed.or<1,
`if`(flag,
log(seq(exp(observed.or), exp(min(max(subplot.data$odds.ratio.upper), 1)), length.out = n.contours+2)),
exp(seq(log(min(subplot.data$odds.ratio.lower)), log(observed.or), length.out = n.contours+2))),
`if`(flag,
exp(seq(log(observed.or), log(max(subplot.data$odds.ratio.upper)),length.out = n.contours+2)),
exp(seq(log(max(min(subplot.data$odds.ratio.lower), 1)), log(observed.or), length.out = n.contours+2)))
)[-c(1, n.contours+2)]
}
else
{
contour_lines_OR = 1- (OR[[i]] / 100)
}
plot.list[[paste0("xi = ", delta.value)]] =
ggplot(subplot.data, aes(y = xi.seq.heatmap, x = gamma.seq.heatmap)) +
# Heat map
geom_tile(aes(fill = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100)) +
# Heat map Color Gradient Scale
scale_fill_distiller(name =  `if`(!flag, "Upper", "Lower"),
palette = "Blues",
limits = rev(1-heatmap.limits)*100,
direction = 1,
na.value = "gray75") +
# Contours
geom_contour(mapping = aes(z = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100),
breaks = round((1-contour_lines_OR)*100,2), colour = "darkred") +
# Contour Labels
geom_text_contour(mapping = aes(z = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100),
breaks = round((1-contour_lines_OR)*100,2),
label.placer = label_placer_fraction(), size = 3, skip = 0,
stroke = 0.3) +
# Axis labels, themes and title
theme_classic() + theme(axis.title = element_blank(),
legend.position = "right",
plot.subtitle = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=12)
) +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
labs(subtitle = bquote(" Partial Control of Confounding (" * delta ~ '=' ~ .(round(delta.value, 2)) * ")"))
if (!missing(highlight))
{
plot.list[[paste0("xi = ", delta.value)]] =
plot.list[[paste0("xi = ", delta.value)]] +
geom_point(x = highlight[[i]][1], y = highlight[[i]][2], color = "red", size = 5, shape = 19)
}
}
o = round(o/sum(o),2)
ggdraw(
wrap_plots(plot.list, ncol=floor(sqrt(length(delta.values))))
) +
annotate(geom = "text", x = 0.45, y = 0, label = bquote(" Confounding Strength (" * Gamma * ")"), size=6.5) +
annotate(geom = "text", x = 0, y = 0.5, label = bquote("Effect Heterogeneity (" * xi * ")"), angle = 90, size=6.5) +
theme(plot.margin = margin(1, 1, 10, 10))
}
############################### Main function for the gamma-xi heatmap #############################
causal_bounds_heatmap = function(o,
delta = c(0.1, 0.2),
gamma.range = c(1, 5),
xi.range = c(2, 5),
alpha = 0.95,
conf.type = "normal",
OR,
bound.type = 'upper',
n.contours = 6,
grid = 5)
{
data.heatmap = heatmap_grid(o = o, delta = delta , gamma.range = gamma.range, xi.range = xi.range, grid = grid, alpha = alpha, conf.type = conf.type)
plot_heatmap(data.heatmap, o, OR, bound.type, n.contours)
}
data = matrix(c(11812, 2847, 6065, 154,
3832,  677, 2206,  44,
6483, 1293, 3947,  98), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "respiratory", "nonrespiratory")
colnames(data) = c("o00", "o01", "o10", "o11")
data
estimate_sen_params = function(data, U)
{
subset.data = rbind(data['all',] - data[U,], data[U,])
p = subset.data / rowSums(subset.data)
delta = min(rowSums(subset.data) / sum(subset.data))
gamma = max(p[1,] / p[2,], p[2,] / p[1,])
xi = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
return(list(
delta = delta,
gamma = gamma,
xi = xi
))
}
sen_params_resp = estimate_sen_params(data, 'respiratory')
sen_params_nonresp = estimate_sen_params(data, 'nonrespiratory')
data.heatmap = heatmap_grid(o = data['all',], delta = c(sen_params_resp$delta, sen_params_nonresp$delta),
gamma.range = c(1,3), xi.range = c(1,3), alpha = 0.95, conf.type = 'normal', grid = 10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
library(TNDsen)
library(metR)
library(cowplot)
library(knitrProgressBar)
############################## Gives the grid for the heatmap ###########################################
heatmap_grid = function(o, delta = c(0.1, 0.2), gamma.range = c(1,5), xi.range = c(2,5), grid = 10, alpha, conf.type = "normal")
{
# Making the grid for heat map
data.heatmap = expand.grid(delta.seq.heatmap=delta,
gamma.seq.heatmap=seq(gamma.range[1], gamma.range[2], length.out = grid),
xi.seq.heatmap=seq(xi.range[1], xi.range[2], length.out = grid))
# Computing the bounds
pb = progress_estimated(nrow(data.heatmap))
for (i in 1:nrow(data.heatmap)) {
k = TND_causal_bounds(o, data.heatmap$delta.seq.heatmap[i],
data.heatmap$gamma.seq.heatmap[i],
data.heatmap$xi.seq.heatmap[i],
alpha, conf.type)
data.heatmap$odds.ratio.upper[i] = k$upper.bound
data.heatmap$odds.ratio.lower[i] = k$lower.bound
update_progress(pb)
}
return(data.heatmap)
}
######################################## Plot Heatmap ###################################################
plot_heatmap = function(data.heatmap, o, OR, bound.type = 'upper', n.contours = 6, highlight)
{
# Plot Design
observed.or = odds.ratio(o)
flag = bound.type == "upper"
plot.list = list()
delta.values = unique(data.heatmap$delta.seq.heatmap)
for(i in 1:length(delta.values))
{
delta.value = delta.values[i]
subplot.data = data.heatmap[data.heatmap$delta.seq.heatmap == delta.value,]
## Heatmap Limits
heatmap.limits = `if`(flag, `if`(observed.or<1,
c(min(subplot.data$odds.ratio.upper),
min(max(subplot.data$odds.ratio.upper),1)),
c(observed.or, max(subplot.data$odds.ratio.upper))),
`if`(observed.or<1,
c(min(subplot.data$odds.ratio.lower), observed.or),
c(1, max(subplot.data$odds.ratio.lower))))
## Heatmap Contours
if(missing(OR))
{
contour_lines_OR = `if`(observed.or<1,
`if`(flag,
log(seq(exp(observed.or), exp(min(max(subplot.data$odds.ratio.upper), 1)), length.out = n.contours+2)),
exp(seq(log(min(subplot.data$odds.ratio.lower)), log(observed.or), length.out = n.contours+2))),
`if`(flag,
exp(seq(log(observed.or), log(max(subplot.data$odds.ratio.upper)),length.out = n.contours+2)),
exp(seq(log(max(min(subplot.data$odds.ratio.lower), 1)), log(observed.or), length.out = n.contours+2)))
)[-c(1, n.contours+2)]
}
else
{
contour_lines_OR = 1- (OR[[i]] / 100)
}
plot.list[[paste0("xi = ", delta.value)]] =
ggplot(subplot.data, aes(y = xi.seq.heatmap, x = gamma.seq.heatmap)) +
# Heat map
geom_tile(aes(fill = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100)) +
# Heat map Color Gradient Scale
scale_fill_distiller(name =  `if`(!flag, "Upper", "Lower"),
palette = "Blues",
limits = rev(1-heatmap.limits)*100,
direction = 1,
na.value = "gray75") +
# Contours
geom_contour(mapping = aes(z = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100),
breaks = round((1-contour_lines_OR)*100,2), colour = "darkred") +
# Contour Labels
geom_text_contour(mapping = aes(z = (1-`if`(flag, odds.ratio.upper, odds.ratio.lower))*100),
breaks = round((1-contour_lines_OR)*100,2),
label.placer = label_placer_fraction(), size = 3, skip = 0,
stroke = 0.3) +
# Axis labels, themes and title
theme_classic() + theme(axis.title = element_blank(),
legend.position = "right",
plot.subtitle = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=12)
) +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
labs(subtitle = bquote(" Partial Control of Confounding (" * delta ~ '=' ~ .(round(delta.value, 2)) * ")"))
if (!missing(highlight))
{
plot.list[[paste0("xi = ", delta.value)]] =
plot.list[[paste0("xi = ", delta.value)]] +
geom_point(x = highlight[[i]][1], y = highlight[[i]][2], color = "red", size = 5, shape = 19)
}
}
o = round(o/sum(o),2)
ggdraw(
wrap_plots(plot.list, ncol=floor(sqrt(length(delta.values))))
) +
annotate(geom = "text", x = 0.45, y = 0, label = bquote(" Confounding Strength (" * Gamma * ")"), size=6.5) +
annotate(geom = "text", x = 0, y = 0.5, label = bquote("Effect Heterogeneity (" * xi * ")"), angle = 90, size=6.5) +
theme(plot.margin = margin(1, 1, 10, 10))
}
############################### Main function for the gamma-xi heatmap #############################
causal_bounds_heatmap = function(o,
delta = c(0.1, 0.2),
gamma.range = c(1, 5),
xi.range = c(2, 5),
alpha = 0.95,
conf.type = "normal",
OR,
bound.type = 'upper',
n.contours = 6,
grid = 5)
{
data.heatmap = heatmap_grid(o = o, delta = delta , gamma.range = gamma.range, xi.range = xi.range, grid = grid, alpha = alpha, conf.type = conf.type)
plot_heatmap(data.heatmap, o, OR, bound.type, n.contours)
}
data = matrix(c(11812, 2847, 6065, 154,
3832,  677, 2206,  44,
6483, 1293, 3947,  98), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "respiratory", "nonrespiratory")
colnames(data) = c("o00", "o01", "o10", "o11")
data
estimate_sen_params = function(data, U)
{
subset.data = rbind(data['all',] - data[U,], data[U,])
p = subset.data / rowSums(subset.data)
delta = min(rowSums(subset.data) / sum(subset.data))
gamma = max(p[1,] / p[2,], p[2,] / p[1,])
xi = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
return(list(
delta = delta,
gamma = gamma,
xi = xi
))
}
sen_params_resp = estimate_sen_params(data, 'respiratory')
sen_params_nonresp = estimate_sen_params(data, 'nonrespiratory')
data.heatmap = heatmap_grid(o = data['all',], delta = c(sen_params_resp$delta, sen_params_nonresp$delta),
gamma.range = c(1,3), xi.range = c(1,3), alpha = 0.95, conf.type = 'normal', grid = 10)
OR = list(
c(84, 85, 86, 87, 89),
c(83, 84, 85, 86, 87, 89)
)
highlight = list(c(sen_params_resp$gamma, sen_params_resp$xi),
c(sen_params_nonresp$gamma, sen_params_nonresp$xi))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", n.contours = 5, highlight = highlight)
data = matrix(c(11812, 2847, 6065, 154,
604,  166,  134,   3,
725,   248,  250,  23), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "black", "hispanic")
colnames(data) = c("o00", "o01", "o10", "o11")
data
estimate_sen_params = function(data, U)
{
data[1,] = data[1,] - colSums()
p = subset.data / rowSums(subset.data)
delta = min(rowSums(subset.data) / sum(subset.data))
gamma = max(p[1,] / p[2,], p[2,] / p[1,])
xi = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
return(list(
delta = delta,
gamma = gamma,
xi = xi
))
}
sen_params_black = estimate_sen_params(data, 'black')
estimate_sen_params = function(data, U)
{
subset.data = rbind(data['all',] - data[U,], data[U,])
p = subset.data / rowSums(subset.data)
delta = min(rowSums(subset.data) / sum(subset.data))
gamma = max(p[1,] / p[2,], p[2,] / p[1,])
xi = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
return(list(
delta = delta,
gamma = gamma,
xi = xi
))
}
sen_params_black = estimate_sen_params(data, 'black')
sen_params_hispanic = estimate_sen_params(data, 'hispanic')
data.heatmap = heatmap_grid(o = data['all',], delta = c(sen_params_black$delta, sen_params_hispanic$delta),
gamma.range = c(1,5), xi.range = c(1,5), alpha = 0.95, conf.type = 'normal', grid = 10)
OR = list(
c(88, 88.25, 88.50, 88.75, 89),
c(87.75, 88, 88.25, 88.5, 88.75, 89)
)
highlight = list(c(sen_params_black$gamma, sen_params_black$xi),
c(sen_params_hispanic$gamma, sen_params_hispanic$xi))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", n.contours = 5, highlight = highlight)
data = matrix(c(11812, 2847, 6065, 154,
604,  166,  134,   3,
725,   248,  250,  23), byrow = TRUE, ncol = 4)
data[,1] = data[,1] - data[,2]
data[,3] = data[,3] - data[,4]
rownames(data) = c("all", "black", "hispanic")
colnames(data) = c("o00", "o01", "o10", "o11")
data
estimate_sen_params = function(data)
{
data[1,] = data[1,] - colSums(data[2:nrow(data),])
delta = c(); gamma = c(); xi = c()
for(i in 1:nrow(data))
{
g = 1
p = data / rowSums(data)
for(j in 1:nrow(data))
{
g = max(p[i,] / p[j,], p[j,] / p[i,], g)
}
subset.data = rbind(data[i,], colSums(data[-i,]))
p = subset.data / rowSums(subset.data)
d = sum(subset.data[1,]) / sum(subset.data)
x = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
delta = c(delta, d)
gamma = c(gamma, g)
xi = c(xi, x)
}
return(list(
delta = delta,
gamma = gamma,
xi = xi))
}
sen_params = estimate_sen_params(data)
sen_params
data.heatmap = heatmap_grid(o = data['all',], delta = sen_params$delta[2:3],
gamma.range = c(1,10), xi.range = c(1,3), alpha = 0.95, conf.type = 'normal', grid = 10)
estimate_sen_params = function(data)
{
data[1,] = data[1,] - colSums(data[2:nrow(data),])
delta = c(); gamma = c(); xi = c()
for(i in 1:nrow(data))
{
g = 1
p = data / rowSums(data)
for(j in 1:nrow(data))
{
g = max(p[i,] / p[j,], p[j,] / p[i,], g)
}
subset.data = rbind(data[i,], colSums(data[-i,]))
p = subset.data / rowSums(subset.data)
d = sum(subset.data[1,]) / sum(subset.data)
x = max(odds.ratio(p[1,])/odds.ratio(p[2,]), odds.ratio(p[2,])/odds.ratio(p[1,]))
delta = c(delta, d)
gamma = c(gamma, g)
xi = c(xi, x)
}
return(list(
delta = delta,
gamma = gamma,
xi = xi))
}
sen_params = estimate_sen_params(data)
data.heatmap = heatmap_grid(o = data['all',], delta = sen_params$delta[2:3],
gamma.range = c(1,10), xi.range = c(1,3), alpha = 0.95, conf.type = 'normal', grid = 10)
OR = list(
c(87.25, 87.5, 87.75, 88, 88.5, 89),
c(86.5, 87, 87.5, 88, 88.5, 89)
)
highlight = list(c(sen_params$gamma[1], sen_params$xi[1]),
c(sen_params$gamma[2], sen_params$xi[2]))
plot_heatmap(data.heatmap, o = data['all',], OR = OR, bound.type = "upper", n.contours = 5, highlight = highlight)
library(ggplot2)
library(patchwork)
library(TNDsen)
library(metR)
library(cowplot)
library(knitrProgressBar)
