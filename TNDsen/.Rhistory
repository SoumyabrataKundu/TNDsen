}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
knitr::opts_chunk$set(echo = TRUE)
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 100)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
knitr::opts_chunk$set(echo = TRUE)
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 100)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
knitr::opts_chunk$set(echo = TRUE)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
multinom(2*Y + Z ~ C, data=data)
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
result$COR = apply(a,1,odds.ratio)
head(result)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
knitr::opts_chunk$set(echo = TRUE)
# Simulation parameters
n = 10000
d = 1
beta0 = rnorm(4)
beta = matrix(rnorm(4*d, mean=1), ncol = d)
delta = runif(n,0.1, 0.5)
gamma = runif(n, 1, 5)
COR_range = c(0.1, 1000)
# Data Generation
## Simulate Covariates
C = matrix(runif(n*d), ncol = d)
## o = softmax(beta @ C + beta_0)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
o = t(apply(beta %*%t(C) + beta0, 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
Label = as.factor(class_labels),
C
)
## Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
pb = progress_estimated(n)
a = matrix(0, nrow = n, ncol = 4)                                   # p_zy | U = 0
for(i in 1:n)
{
while (TRUE) {
candidate = extraDistr::rdirichlet(1,c(1,1,1,1)) * (u[i,]-l[i,]) + l[i,]
#print(odds.ratio(candidate))
if(COR_range[1] <= odds.ratio(candidate) & odds.ratio(candidate) <= COR_range[2])
{
a[i,] = c(candidate)
break
}
}
update_progress(pb)
}
b = (o - a*(1-delta))/delta                                         # p_zy | U = 1
data$delta = delta                                                  # o = a * (1-delta) + b * delta
data$gamma =  pmax(apply(a/b, 1, max), apply(b/a, 1, max))          # max(a/b, b/a)
data$xi = pmax(apply(a, 1, odds.ratio) / apply(b, 1, odds.ratio),   # max(OR(a)/OR(b), OR(b)/OR(a))
apply(b, 1, odds.ratio) / apply(a, 1, odds.ratio))
data
barplot(table(data$Label))
result = TND_causal_bounds_from_data(2*Y + Z ~ C, data,  alpha = 0.90, conf.type='normal')
result$COR = apply(a,1,odds.ratio)
head(result)
subsets = (1:5)
indices = subsets#[order(result$COR[subsets])]
ggplot(data = (1-result[indices,])*100, aes(y=1:length(indices)))+
geom_point(aes(x=COR), color='blue') +
geom_point(aes(x=upper.bound), color='red') +
geom_point(aes(x=lower.bound), color='red') +
geom_segment(aes(x=lower.bound, xend = upper.bound, yend=1:length(indices)), color='red') +
geom_point(aes(x = (1-apply(o[indices, ],1, odds.ratio))*100), color='green')+
xlim(c(0,100))
