legend.position = c(0.16,0.82)) +
xlim(c(50, 100))
width = 0.1
plot_data$sim = rep(1:n.sim, each = nrow(simulation_data$design_matrix))
for(i in 1:n.sim)
{
plot_data$cover[1:4 + (i-1)*4] = all(plot_data$COR.CI.lower[1:4 + (i-1)*4]>= plot_data$COR.lower[1:4 + (i-1)*4] & plot_data$COR.upper[1:4 + (i-1)*4]>= plot_data$COR.CI.upper[1:4 + (i-1)*4])
}
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col=cover)) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col=cover)) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col=cover)) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('red', 'black', 'darkgreen'),
labels = c('Sensitivity CI\n(Not Covered)', 'Naive CI', 'Sensitivity CI\n(Covered)'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab('Simulation') +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank())
n.sim = 20
result = data.frame()
index = 1
for(sim in 1:n.sim)
{
print(paste0('Simulation : ', sim, ' / ', n.sim))
simulation_data = get_simulation_data(beta)
pb = progress_estimated(nrow(simulation_data$design_matrix))
for (i in 1:nrow(simulation_data$design_matrix))
{
# Confidence Interval for Odds Ratio
Sigma_or = kronecker(c(-1,-1,1), simulation_data$design_matrix[i,]) * odds.ratio(simulation_data$o.hat[i,])  # 1 x 3d
variance = diag(t(Sigma_or) %*% simulation_data$Sigma_beta %*% Sigma_or)                                     # 1 x 1
result[index, 'OR.CI.lower'] = odds.ratio(simulation_data$o.hat[i,]) - 1.96 * sqrt(variance)
result$OR.CI.upper[index] = odds.ratio(simulation_data$o.hat[i,]) + 1.96 * sqrt(variance)
# Bounds for each predicted probability
## Sigma From Multinomial Logistic Regression (Delta Method)
Sigma_o = (diag(simulation_data$o.hat[i,]) - simulation_data$o.hat[i,] %*% t(simulation_data$o.hat[i,]))   #  4 x 4
Sigma_delta = kronecker(Sigma_o[2:4,], simulation_data$design_matrix[i,])                                  # 3d x 4
Sigma = t(Sigma_delta) %*% simulation_data$Sigma_beta %*% Sigma_delta                                      #  4 x 4
bounds = TND_causal_bounds(simulation_data$o.hat[i, ], delta, gamma, xi, alpha = 0.95, conf.type = 'quadratic', Sigma = Sigma)
result$COR.CI.lower[index] = bounds$lower.bound
result$COR.CI.upper[index] = bounds$upper.bound
# Bounds for each true probability
bounds = TND_causal_bounds(as.numeric(simulation_data$o[i,]), delta, gamma, xi)
result$COR.lower[index] = bounds$lower.bound
result$COR.upper[index] = bounds$upper.bound
index = index + 1
update_progress(pb)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
data_generation = function(beta, C)
{
## Simulate Covariates
if(missing(C)){C = matrix(runif(n*d), ncol = d)/2+0.5}
## o = softmax(beta @ C + beta_0)
o = t(apply(beta %*%t(cbind(1, C)), 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
C
)
# Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
if(min(apply(l, 1, odds.ratio))<=COR_range[1] |
max(apply(u, 1, odds.ratio))>=COR_range[2]) stop('This configuration does not work.')
return(data)
}
set.seed(123)
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
COR_range = c(0.05, 0.7)
n = 50000
d = 1
# Choosing suitable beta
success = FALSE
while (!success) {
tryCatch({
# Beta
beta = matrix(rnorm(4*(d+1), mean=0),
nrow = 4, ncol = d+1)
# Fit data
fit_data = data_generation(beta)
success = TRUE
}, error = function(e){})
}
fit_data
barplot(table(2*fit_data$Y + fit_data$Z))
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
COR_range = c(0.05, 0.7)
n = 500000
d = 1
get_simulation_data = function(beta)
{
# Training
model = multinom(2*Y + Z ~ C, data=data_generation(beta), trace=FALSE)
# Prediction
C_star = matrix(seq(0.5, 1, length.out=4), ncol=1)
test_data = data_generation(beta, C_star)
return(list(
o = t(apply(beta %*%t(cbind(1, C_star)), 2, softmax)), # true probabilities
o.hat = predict(model, test_data, type = 'probs'),     # predicted probabilities
Sigma_beta = vcov(model),                              # variance-covariance matrix
design_matrix = cbind(1, C_star)                       # design matrix
)
)
}
n.sim = 20
result = data.frame()
index = 1
for(sim in 1:n.sim)
{
print(paste0('Simulation : ', sim, ' / ', n.sim))
simulation_data = get_simulation_data(beta)
pb = progress_estimated(nrow(simulation_data$design_matrix))
for (i in 1:nrow(simulation_data$design_matrix))
{
# Confidence Interval for Odds Ratio
Sigma_or = kronecker(c(-1,-1,1), simulation_data$design_matrix[i,]) * odds.ratio(simulation_data$o.hat[i,])  # 1 x 3d
variance = diag(t(Sigma_or) %*% simulation_data$Sigma_beta %*% Sigma_or)                                     # 1 x 1
result[index, 'OR.CI.lower'] = odds.ratio(simulation_data$o.hat[i,]) - 1.96 * sqrt(variance)
result$OR.CI.upper[index] = odds.ratio(simulation_data$o.hat[i,]) + 1.96 * sqrt(variance)
# Bounds for each predicted probability
## Sigma From Multinomial Logistic Regression (Delta Method)
Sigma_o = (diag(simulation_data$o.hat[i,]) - simulation_data$o.hat[i,] %*% t(simulation_data$o.hat[i,]))   #  4 x 4
Sigma_delta = kronecker(Sigma_o[2:4,], simulation_data$design_matrix[i,])                                  # 3d x 4
Sigma = t(Sigma_delta) %*% simulation_data$Sigma_beta %*% Sigma_delta                                      #  4 x 4
bounds = TND_causal_bounds(simulation_data$o.hat[i, ], delta, gamma, xi, alpha = 0.95, conf.type = 'quadratic', Sigma = Sigma)
result$COR.CI.lower[index] = bounds$lower.bound
result$COR.CI.upper[index] = bounds$upper.bound
# Bounds for each true probability
bounds = TND_causal_bounds(as.numeric(simulation_data$o[i,]), delta, gamma, xi)
result$COR.lower[index] = bounds$lower.bound
result$COR.upper[index] = bounds$upper.bound
index = index + 1
update_progress(pb)
}
}
plot_data = (1-result)*100
plot_data$C = simulation_data$design_matrix[,-1]
width = 0.02
ggplot(data = plot_data[1:nrow(simulation_data$design_matrix),])+
# Confidence Interval for Odds Ratio
geom_point(aes(x=OR.CI.lower, y=C+width, color='Naive CI'))+
geom_segment(aes(x=OR.CI.lower, xend = OR.CI.upper, y=C+width, yend=C+width, color='Naive CI')) +
geom_point(aes(x=OR.CI.upper, y=C+width, color='Naive CI'))+
# Bounds for each predicted probability
geom_point(aes(x=COR.CI.lower, y=C, color='Sensitivity CI'))+
geom_segment(aes(x=COR.CI.lower, xend = COR.CI.upper, y=C, yend=C, color='Sensitivity CI')) +
geom_point(aes(x=COR.CI.upper, y=C, color='Sensitivity CI'))+
# Bounds for each true probability
geom_point(aes(x=COR.lower, y=C-width, color='True Sensitivity Bounds'))+
geom_segment(aes(x=COR.lower, xend = COR.upper, y=C-width, yend=C-width, color='True Sensitivity Bounds')) +
geom_point(aes(x=COR.upper, y=C-width, color='True Sensitivity Bounds')) +
xlab('Vaccine Efficiency 100(1-OR)%') + ylab('Confounder (C)') +
labs(title = paste('n=', n)) +
scale_color_manual(values = c('black', 'red', 'blue'))+
theme(legend.title = element_blank(),
legend.position = c(0.16,0.82)) +
xlim(c(50, 100))
width = 0.1
plot_data$sim = rep(1:n.sim, each = nrow(simulation_data$design_matrix))
for(i in 1:n.sim)
{
plot_data$cover[1:4 + (i-1)*4] = all(plot_data$COR.CI.lower[1:4 + (i-1)*4]>= plot_data$COR.lower[1:4 + (i-1)*4] & plot_data$COR.upper[1:4 + (i-1)*4]>= plot_data$COR.CI.upper[1:4 + (i-1)*4])
}
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col=cover)) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col=cover)) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col=cover)) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('red', 'black', 'darkgreen'),
labels = c('Sensitivity CI\n(Not Covered)', 'Naive CI', 'Sensitivity CI\n(Covered)'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab('Simulation') +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank())
plot_data = (1-result)*100
plot_data$C = simulation_data$design_matrix[,-1]
width = 0.02
ggplot(data = plot_data[1:nrow(simulation_data$design_matrix),])+
# Confidence Interval for Odds Ratio
geom_point(aes(x=OR.CI.lower, y=C+width, color='Naive CI'))+
geom_segment(aes(x=OR.CI.lower, xend = OR.CI.upper, y=C+width, yend=C+width, color='Naive CI')) +
geom_point(aes(x=OR.CI.upper, y=C+width, color='Naive CI'))+
# Bounds for each predicted probability
geom_point(aes(x=COR.CI.lower, y=C, color='Sensitivity CI'))+
geom_segment(aes(x=COR.CI.lower, xend = COR.CI.upper, y=C, yend=C, color='Sensitivity CI')) +
geom_point(aes(x=COR.CI.upper, y=C, color='Sensitivity CI'))+
# Bounds for each true probability
geom_point(aes(x=COR.lower, y=C-width, color='True Sensitivity Bounds'))+
geom_segment(aes(x=COR.lower, xend = COR.upper, y=C-width, yend=C-width, color='True Sensitivity Bounds')) +
geom_point(aes(x=COR.upper, y=C-width, color='True Sensitivity Bounds')) +
xlab('Vaccine Efficiency 100(1-OR)%') + ylab('Confounder (C)') +
labs(title = paste('n=', n)) +
scale_color_manual(values = c('black', 'red', 'blue'))+
theme(legend.title = element_blank(),
legend.position = c(0.16,0.82)) +
xlim(c(50, 100))
width = 0.1
plot_data$sim = rep(1:n.sim, each = nrow(simulation_data$design_matrix))
for(i in 1:n.sim)
{
plot_data$cover[1:4 + (i-1)*4] = all(plot_data$COR.CI.lower[1:4 + (i-1)*4]>= plot_data$COR.lower[1:4 + (i-1)*4] & plot_data$COR.upper[1:4 + (i-1)*4]>= plot_data$COR.CI.upper[1:4 + (i-1)*4])
}
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col=cover)) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col=cover)) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col=cover)) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('red', 'black', 'darkgreen'),
labels = c('Sensitivity CI\n(Not Covered)', 'Naive CI', 'Sensitivity CI\n(Covered)'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab('Simulation') +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(TNDsen)
library(nnet)
library(ggplot2)
library(knitrProgressBar)
softmax <- function(x) {
# Subtract the maximum value from each element to prevent overflow
exp_x <- exp(x - max(x))
return( exp_x / sum(exp_x))
}
data_generation = function(beta, C)
{
## Simulate Covariates
if(missing(C)){C = matrix(runif(n*d), ncol = d)/2+0.5}
## o = softmax(beta @ C + beta_0)
o = t(apply(beta %*%t(cbind(1, C)), 2, softmax))
## Data Generation Y,Z|C,T = 1 ~ Multinomial(o)
sample_class <- function(prob_vector) {
sample(0:(length(prob_vector)-1), size = 1, prob = prob_vector)
}
class_labels = apply(o, 1, sample_class)
data = data.frame(
Z = class_labels %% 2,
Y = class_labels %/% 2,
C
)
# Sensitivity Parameters
l = pmax(o/(delta*gamma + (1-delta)), (o-delta)/(1-delta))          # l_zy
u = pmin(o*gamma/(delta + (1-delta)*gamma), 1)                      # u_zy
if(min(apply(l, 1, odds.ratio))<=COR_range[1] |
max(apply(u, 1, odds.ratio))>=COR_range[2]) stop('This configuration does not work.')
return(data)
}
set.seed(123)
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
COR_range = c(0.05, 0.7)
n = 50000
d = 1
# Choosing suitable beta
success = FALSE
while (!success) {
tryCatch({
# Beta
beta = matrix(rnorm(4*(d+1), mean=0),
nrow = 4, ncol = d+1)
# Fit data
fit_data = data_generation(beta)
success = TRUE
}, error = function(e){})
}
fit_data
barplot(table(2*fit_data$Y + fit_data$Z))
# Simulation parameters
delta = 0.1
gamma = 5
xi = 2
COR_range = c(0.05, 0.7)
n = 500000
d = 1
get_simulation_data = function(beta)
{
# Training
model = multinom(2*Y + Z ~ C, data=data_generation(beta), trace=FALSE)
# Prediction
C_star = matrix(seq(0.5, 1, length.out=4), ncol=1)
test_data = data_generation(beta, C_star)
return(list(
o = t(apply(beta %*%t(cbind(1, C_star)), 2, softmax)), # true probabilities
o.hat = predict(model, test_data, type = 'probs'),     # predicted probabilities
Sigma_beta = vcov(model),                              # variance-covariance matrix
design_matrix = cbind(1, C_star)                       # design matrix
)
)
}
n.sim = 20
result = data.frame()
index = 1
for(sim in 1:n.sim)
{
print(paste0('Simulation : ', sim, ' / ', n.sim))
simulation_data = get_simulation_data(beta)
pb = progress_estimated(nrow(simulation_data$design_matrix))
for (i in 1:nrow(simulation_data$design_matrix))
{
# Confidence Interval for Odds Ratio
Sigma_or = kronecker(c(-1,-1,1), simulation_data$design_matrix[i,]) * odds.ratio(simulation_data$o.hat[i,])  # 1 x 3d
variance = diag(t(Sigma_or) %*% simulation_data$Sigma_beta %*% Sigma_or)                                     # 1 x 1
result[index, 'OR.CI.lower'] = odds.ratio(simulation_data$o.hat[i,]) - 2.57 * sqrt(variance)
result$OR.CI.upper[index] = odds.ratio(simulation_data$o.hat[i,]) + 2.57 * sqrt(variance)
# Bounds for each predicted probability
## Sigma From Multinomial Logistic Regression (Delta Method)
Sigma_o = (diag(simulation_data$o.hat[i,]) - simulation_data$o.hat[i,] %*% t(simulation_data$o.hat[i,]))   #  4 x 4
Sigma_delta = kronecker(Sigma_o[2:4,], simulation_data$design_matrix[i,])                                  # 3d x 4
Sigma = t(Sigma_delta) %*% simulation_data$Sigma_beta %*% Sigma_delta                                      #  4 x 4
bounds = TND_causal_bounds(simulation_data$o.hat[i, ], delta, gamma, xi, alpha = 0.99, conf.type = 'quadratic', Sigma = Sigma)
result$COR.CI.lower[index] = bounds$lower.bound
result$COR.CI.upper[index] = bounds$upper.bound
# Bounds for each true probability
bounds = TND_causal_bounds(as.numeric(simulation_data$o[i,]), delta, gamma, xi)
result$COR.lower[index] = bounds$lower.bound
result$COR.upper[index] = bounds$upper.bound
index = index + 1
update_progress(pb)
}
}
plot_data = (1-result)*100
plot_data$C = simulation_data$design_matrix[,-1]
width = 0.02
ggplot(data = plot_data[1:nrow(simulation_data$design_matrix),])+
# Confidence Interval for Odds Ratio
geom_point(aes(x=OR.CI.lower, y=C+width, color='Naive CI'))+
geom_segment(aes(x=OR.CI.lower, xend = OR.CI.upper, y=C+width, yend=C+width, color='Naive CI')) +
geom_point(aes(x=OR.CI.upper, y=C+width, color='Naive CI'))+
# Bounds for each predicted probability
geom_point(aes(x=COR.CI.lower, y=C, color='Sensitivity CI'))+
geom_segment(aes(x=COR.CI.lower, xend = COR.CI.upper, y=C, yend=C, color='Sensitivity CI')) +
geom_point(aes(x=COR.CI.upper, y=C, color='Sensitivity CI'))+
# Bounds for each true probability
geom_point(aes(x=COR.lower, y=C-width, color='True Sensitivity Bounds'))+
geom_segment(aes(x=COR.lower, xend = COR.upper, y=C-width, yend=C-width, color='True Sensitivity Bounds')) +
geom_point(aes(x=COR.upper, y=C-width, color='True Sensitivity Bounds')) +
xlab('Vaccine Efficiency 100(1-OR)%') + ylab('Confounder (C)') +
labs(title = paste('n=', n)) +
scale_color_manual(values = c('black', 'red', 'blue'))+
theme(legend.title = element_blank(),
legend.position = c(0.16,0.82)) +
xlim(c(50, 100))
width = 0.1
plot_data$sim = rep(1:n.sim, each = nrow(simulation_data$design_matrix))
for(i in 1:n.sim)
{
plot_data$cover[1:4 + (i-1)*4] = all(plot_data$COR.CI.lower[1:4 + (i-1)*4]>= plot_data$COR.lower[1:4 + (i-1)*4] & plot_data$COR.upper[1:4 + (i-1)*4]>= plot_data$COR.CI.upper[1:4 + (i-1)*4])
}
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col=cover)) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col=cover)) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col=cover)) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('red', 'black', 'darkgreen'),
labels = c('Sensitivity CI\n(Not Covered)', 'Naive CI', 'Sensitivity CI\n(Covered)'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab('Simulation') +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank())
plot_data = (1-result)*100
plot_data$C = simulation_data$design_matrix[,-1]
width = 0.02
ggplot(data = plot_data[1:nrow(simulation_data$design_matrix),])+
# Confidence Interval for Odds Ratio
geom_point(aes(x=OR.CI.lower, y=C+width, color='Naive CI'))+
geom_segment(aes(x=OR.CI.lower, xend = OR.CI.upper, y=C+width, yend=C+width, color='Naive CI')) +
geom_point(aes(x=OR.CI.upper, y=C+width, color='Naive CI'))+
# Bounds for each predicted probability
geom_point(aes(x=COR.CI.lower, y=C, color='Sensitivity CI'))+
geom_segment(aes(x=COR.CI.lower, xend = COR.CI.upper, y=C, yend=C, color='Sensitivity CI')) +
geom_point(aes(x=COR.CI.upper, y=C, color='Sensitivity CI'))+
# Bounds for each true probability
geom_point(aes(x=COR.lower, y=C-width, color='True Sensitivity Bounds'))+
geom_segment(aes(x=COR.lower, xend = COR.upper, y=C-width, yend=C-width, color='True Sensitivity Bounds')) +
geom_point(aes(x=COR.upper, y=C-width, color='True Sensitivity Bounds')) +
xlab('Vaccine Efficiency 100(1-OR)%') + ylab('Confounder (C)') +
labs(title = paste('n=', n)) +
scale_color_manual(values = c('black', 'red', 'blue'))+
theme(legend.title = element_blank(),
legend.position = c(0.16,0.82)) +
xlim(c(50, 100))
width = 0.1
plot_data$sim = rep(1:n.sim, each = nrow(simulation_data$design_matrix))
for(i in 1:n.sim)
{
plot_data$cover[1:4 + (i-1)*4] = all(plot_data$COR.CI.lower[1:4 + (i-1)*4]>= plot_data$COR.lower[1:4 + (i-1)*4] & plot_data$COR.upper[1:4 + (i-1)*4]>= plot_data$COR.CI.upper[1:4 + (i-1)*4])
}
ggplot(data = plot_data) +
# Naive CI
geom_point(aes(x = OR.CI.lower, y = sim + width, col='Naive CI')) +
geom_point(aes(x = OR.CI.upper, y = sim + width, col='Naive CI')) +
geom_segment(aes(x = OR.CI.lower, y = sim + width, xend = OR.CI.upper, yend = sim + width, col='Naive CI')) +
# Sensitivity Adjusted CI
geom_point(aes(x = COR.CI.lower, y = sim - width, col=cover)) +
geom_point(aes(x = COR.CI.upper, y = sim - width, col=cover)) +
geom_segment(aes(x = COR.CI.lower, y = sim - width, xend = COR.CI.upper, yend = sim - width, col=cover)) +
# True Causal Bounds
geom_rect(aes(xmin = COR.lower, xmax = COR.upper, ymax = Inf, ymin = -Inf, fill='True Sensitivity Bounds'), col = 'blue', linetype = 'dashed') +
# Confounders
facet_wrap(~ C, scales = "free_x", nrow=1, labeller = labeller(C = function(x) paste("C =", round(as.numeric(x),2)))) +
# Theme
scale_y_continuous(breaks = 1:n.sim) +
scale_color_manual(values = c('red', 'black', 'darkgreen'),
labels = c('Sensitivity CI\n(Not Covered)', 'Naive CI', 'Sensitivity CI\n(Covered)'))+
scale_fill_manual(values = c(alpha('blue', 0.01)),
guide = guide_legend(
order = 3,
override.aes = list(
linetype = 'dashed',
color = 'blue'))
)+
xlab("Vaccine Efficiency 100(1-OR)%") + ylab('Simulation') +
theme(legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
axis.text.y = element_blank())
